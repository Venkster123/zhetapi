#!/usr/bin/python3
import os
import sys

# TODO: integrate into a parsing library functionality
counter = 0
with open('engine/lang/tokens.nota') as fin:
	lines = fin.readlines()

lines = [line.strip() for line in lines]
lines = [line for line in lines if len(line) > 0 and line[0] != '#']

whole = ''.join(lines)
whole = [token.strip() for token in whole.split(',')]

print(whole)

# TODO: allow for custom class (to replace LexClass)
# TODO: add autogenerated header statement
hlines = []

slines = [
	'#include \"../../engine/lang/ltag.hpp\"\n'
	'namespace zhetapi {\n'
]

for token in whole:
	hlines.append(f'struct {token} {{static constexpr LexTag id = {counter};}};\n')
	slines.append(f'\tconst LexTag {token}::id;\n')
	counter += 1

with open('engine/lang/tokens_nota.hpp', 'w') as fout:
	fout.writelines(hlines)

slines.append('}\n')
with open('source/lang/tokens_nota.cpp', 'w') as fout:
	fout.writelines(slines)